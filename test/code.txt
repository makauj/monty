#include "main.h"

/**
 * add - Adds the top two elements of the stack.
 * @stack: Double pointer to the stack.
 * @line_number: The current line number in the file.
 */
void monty_add(stack_t **stack, unsigned int line_number)
{
    stack_t *first = *stack;
    stack_t *second;
    int sum;

    if (*stack == NULL || (*stack)->next == NULL)
    {
        fprintf(stderr, "L%d: can't add, stack too short\n", line_number);
        exit(EXIT_FAILURE);
    }

    first = *stack;
    second = (*stack)->next;
    sum = first->n + second->n;

    second->n = sum;
    *stack = second;

    second->prev = NULL;
    second->next = first->next;

    if (first->next)
        first->next->prev = second;

    free(first);
}
#include "main.h"

/**
 * div - Divides the second top element of the stack by the top element.
 * @stack: Double pointer to the stack.
 * @line_number: The current line number in the file.
 */
void monty_div(stack_t **stack, unsigned int line_number)
{
    stack_t *first = *stack;
    stack_t *second;
    int result;

    if (first == NULL || first->next == NULL)
    {
        fprintf(stderr, "L%d: can't div, stack too short\n", line_number);
        exit(EXIT_FAILURE);
    }

    second = first->next;

    if (first->n == 0)
    {
        fprintf(stderr, "L%d: division by zero\n", line_number);
        exit(EXIT_FAILURE);
    }

    result = second->n / first->n;

    second->n = result;
    *stack = second;

    second->prev = NULL;
    second->next = first->next;

    if (first->next)
        first->next->prev = second;

    free(first);
}
#include "main.h"

/**
 * execute_file - execute file
 * @file: file
 * 
 */
void execute_file(FILE *file)
{
    char *line = malloc(256), *trimmed_line;
    size_t len = 256;
    unsigned int line_number = 0;
    stack_t *stack = NULL;
    char *opcode, *argument;
    instruction_t instruction;
    int value;
    if (!line)
    {
        fprintf(stderr, "Error: malloc failed\n");
        exit(EXIT_FAILURE);
    }

    while (fgets(line, sizeof(len), file) != NULL)
    {
        line_number++;

        trimmed_line = line;
        while (*trimmed_line == ' ')
            trimmed_line++;

        if (*trimmed_line == '#' || *trimmed_line == '\0')
        {
            continue;
        }

        opcode = strtok(trimmed_line, " \n");
        argument = strtok(NULL, " \n");

        if (opcode)
        {
            instruction = get_instruction(opcode);
            if (instruction.f)
            {
                if (strcmp(opcode, "push") == 0)
                {
                    if (argument == NULL)
                    {
                        fprintf(stderr, "L%d: usage: push integer\n", line_number);
                        exit(EXIT_FAILURE);
                    }
                    value = atoi(argument);
                    monty_push(&stack, line_number);
                }
                else
                {
                    instruction.f(&stack, line_number);
                }
            }
            else
            {
                fprintf(stderr, "L%d: unknown instruction %s\n", line_number, opcode);
                exit(EXIT_FAILURE);
            }
        }
    }

    free(line);
    free_stack(stack); // Clean up stack
}
/**
 * get_instruction - Retrieves the instruction corresponding to an opcode.
 * @opcode: The opcode to look up.
 * 
 * Return: The instruction struct corresponding to the opcode.
 *         If the opcode is not found, it returns NULL.
 */
instruction_t get_instruction(char *opcode)
{
    int i;
    instruction_t instructions[] = {
        {"push", monty_push},
        {"pall", monty_pall},
        {"pint", monty_pint},
        {"pop", monty_pop},
        {"swap", monty_swap},
        {"add", monty_add},
        {"nop", monty_nop},
        {"sub", monty_sub},
        {"div", monty_div},
        {"mul", monty_mul},
        {"mod", monty_mod},
        {"pchar", monty_pchar},
        {"pstr", monty_pstr},
        {NULL, NULL}
    };

    for (i = 0; instructions[i].opcode != NULL; i++)
    {
        if (strcmp(instructions[i].opcode, opcode) == 0)
        {
            return instructions[i];
        }
    }

    instruction_t null_instruction = {NULL, NULL};
    return (null_instruction);
}#include "main.h"

/**
 * free_stack - Frees all elements of the stack.
 * @stack: Pointer to the top of the stack.
 */

void free_stack(stack_t *stack)
{
    stack_t *current = stack;
    stack_t *next_node;

    while (current)
    {
        next_node = current->next;
        free(current);
        current = next_node;
    }
}

/**
 * execute_opcode - Executes the given opcode on the stack.
 * @instruction: Pointer to the instruction structure containing opcode and function.
 * @stack: Double pointer to the stack.
 * @line_number: The current line number in the file.
 */
void execute_opcode(instruction_t *instruction, stack_t **stack, unsigned int line_number)
{
    if (instruction == NULL || instruction->f == NULL)
    {
        handle_error("Unknown instruction");
    }

    instruction->f(stack, line_number);
}

/**
 * handle_error - Prints an error message and exits the program.
 * @message: The error message to print.
 */
void handle_error(const char *message)
{
    fprintf(stderr, "%s\n", message);
    exit(EXIT_FAILURE);
}
#include "main.h"

/**
 * main - entry into main
 * @argc: arguments
 * @argv: pointer to arguments
 * 
 * Return: 0
 */
int main(int argc, char *argv[])
{
    FILE *file;

    if (argc != 2)
    {
        fprintf(stderr, "USAGE: monty file\n");
        exit(EXIT_FAILURE);
    }

    file = fopen(argv[1], "r");
    if (!file)
    {
        fprintf(stderr, "Error: Can't open file %s\n", argv[1]);
        exit(EXIT_FAILURE);
    }

    execute_file(file);

    fclose(file);

    return 0;
}
#include "main.h"

/**
 * mod - Computes the remainder of the division of the second top element
 *       of the stack by the top element.
 * @stack: Double pointer to the stack.
 * @line_number: The current line number in the file.
 */
void monty_mod(stack_t **stack, unsigned int line_number)
{
    stack_t *first = *stack;
    stack_t *second;
    int result;

    if (*stack == NULL || (*stack)->next == NULL)
    {
        fprintf(stderr, "L%d: can't mod, stack too short\n", line_number);
        exit(EXIT_FAILURE);
    }

    first = *stack;
    second = (*stack)->next;

    if (first->n == 0)
    {
        fprintf(stderr, "L%d: division by zero\n", line_number);
        exit(EXIT_FAILURE);
    }

    result = second->n % first->n;

    second->n = result;
    stack = second;

    second->prev = NULL;
    second->next = first->next;

    if (first->next)
        first->next->prev = second;

    free(first);
}
#include "main.h"

/**
 * mul - Multiplies the second top element of the stack with the top element.
 * @stack: Double pointer to the stack.
 * @line_number: The current line number in the file.
 */
void monty_mul(stack_t **stack, unsigned int line_number)
{
    stack_t *first = *stack;
    stack_t *second;
    int result;

    if (*stack == NULL || (*stack)->next == NULL)
    {
        fprintf(stderr, "L%d: can't mul, stack too short\n", line_number);
        exit(EXIT_FAILURE);
    }

    first = *stack;
    second = (*stack)->next;
    result = second->n * first->n;

    second->n = result;
    *stack = second;

    second->prev = NULL;
    second->next = first->next;

    if (first->next)
        first->next->prev = second;

    free(first);
}
#include "main.h"

/**
 * nop - Does nothing.
 * @stack: Double pointer to the stack (not used).
 * @line_number: The current line number in the file (not used).
 */
void monty_nop(stack_t **stack, unsigned int line_number)
{
    (void)stack;
    (void)line_number;
}
#include "main.h"

/**
 * pall - Prints all the values on the stack.
 * @stack: Double pointer to the stack.
 * @line_number: The current line number in the file (not used).
 */
void monty_pall(stack_t **stack, unsigned int line_number)
{
    stack_t *current = *stack;

    (void)line_number;

    while (current)
    {
        printf("%d\n", current->n);
        current = current->next;
    }
}#include "main.h"

/**
 * pchar - Prints the char at the top of the stack.
 * @stack: Double pointer to the stack.
 * @line_number: The current line number in the file.
 */
void monty_pchar(stack_t **stack, unsigned int line_number)
{
    int value = 0;

    if (*stack == NULL)
    {
        fprintf(stderr, "L%d: can't pchar, stack empty\n", line_number);
        exit(EXIT_FAILURE);
    }

    value = (*stack)->n;

    if (value < 0 || value > 127)
    {
        fprintf(stderr, "L%d: can't pchar, value out of range\n", line_number);
        exit(EXIT_FAILURE);
    }

    printf("%c\n", (char)value);
}
#include "main.h"

/**
 * pint - Prints the value at the top of the stack.
 * @stack: Double pointer to the stack.
 * @line_number: The current line number in the file.
 */
void monty_pint(stack_t **stack, unsigned int line_number)
{
    if (*stack == NULL)
    {
        fprintf(stderr, "L%d: can't pint, stack empty\n", line_number);
        exit(EXIT_FAILURE);
    }

    printf("%d\n", (*stack)->n);
}
#include "main.h"

/**
 * pop - Removes the top element of the stack.
 * @stack: Double pointer to the stack.
 * @line_number: The current line number in the file.
 */
void monty_pop(stack_t **stack, unsigned int line_number)
{
    stack_t *top_node;

    if (*stack == NULL)
    {
        fprintf(stderr, "L%d: can't pop an empty stack\n", line_number);
        exit(EXIT_FAILURE);
    }

    stack_t *top_node = *stack;
    *stack = (*stack)->next;

    if (*stack)
        (*stack)->prev = NULL;

    free(top_node);
}
#include "main.h"
/**
 * pstr - Prints the string starting at the top of the stack.
 * @stack: Double pointer to the stack.
 * @line_number: The current line number in the file.
 */
void monty_pstr(stack_t **stack, unsigned int line_number)
{
    stack_t *current = *stack;
    int value;

    if (current == NULL)
    {
        printf("\n");
        return;
    }

    while (current != NULL)
    {
        value = current->n;

        if (value == 0 || value < 0 || value > 127)
            break;

        printf("%c", (char)value);

        current = current->next;
    }

    printf("\n");
}#include "main.h"

/**
 * push - Pushes an element to the stack.
 * @stack: Double pointer to the stack.
 * @line_number: The current line number in the file.
 * @value: The integer value to push onto the stack.
 */
void monty_push(stack_t **stack, unsigned int line_number)
{
    stack_t *new_node;
    int n;
    const char *value;

    if (value == NULL || !isdigit(value[0]))
    {
        fprintf(stderr, "L%d: usage: push integer\n", line_number);
        exit(EXIT_FAILURE);
    }

    n = atoi(value);

    new_node = malloc(sizeof(stack_t));
    if (!new_node)
    {
        fprintf(stderr, "Error: malloc failed\n");
        exit(EXIT_FAILURE);
    }

    new_node->n = n;
    new_node->prev = NULL;
    new_node->next = *stack;

    if (*stack)
        (*stack)->prev = new_node;

    *stack = new_node;
}#include "main.h"

/**
 * rotl - Rotates the stack to the top.
 * @stack: Double pointer to the stack.
 * @line_number: The current line number in the file (not used here).
 */
void monty_rotl(stack_t **stack, unsigned int line_number)
{
    stack_t *top = *stack;
    stack_t *current;
    if (!stack || !*stack || !(*stack)->next)
        return;

    *stack = top->next;
    (*stack)->prev = NULL;

    current = *stack;
    while (current->next)
        current = current->next;

    current->next = top;
    top->next = NULL;
    top->prev = current;
}
#include "main.h"

/**
 * rotr - Rotates the stack to the bottom.
 * @stack: Double pointer to the stack.
 * @line_number: The current line number in the file (not used here).
 */
void monty_rotr(stack_t **stack, unsigned int line_number)
{
    stack_t *current = *stack;

    if (!stack || !*stack || !(*stack)->next)
        return;

    while (current->next)
        current = current->next;

    current->prev->next = NULL;
    current->prev = NULL;
    current->next = *stack;
    (*stack)->prev = current;
    *stack = current;
}#include "main.h"

/**
 * sub - Subtracts the top element of the stack from the second top element.
 * @stack: Double pointer to the stack.
 * @line_number: The current line number in the file.
 */
void monty_sub(stack_t **stack, unsigned int line_number)
{
    stack_t *first = *stack;
    stack_t *second;
    int difference;

    if (*stack == NULL || (*stack)->next == NULL)
    {
        fprintf(stderr, "L%d: can't sub, stack too short\n", line_number);
        exit(EXIT_FAILURE);
    }

    second = (*stack)->next;
    difference = second->n - first->n;

    second->n = difference;
    *stack = second;

    /* Update the links */
    second->prev = NULL;
    second->next = first->next;

    if (first->next)
        first->next->prev = second;

    free(first);
}
#include "main.h"

/**
 * swap - Swaps the top two elements of the stack.
 * @stack: Double pointer to the stack.
 * @line_number: The current line number in the file.
 */
void monty_swap(stack_t **stack, unsigned int line_number)
{
    stack_t *first = *stack;
    stack_t * second;

    if (*stack == NULL || (*stack)->next == NULL)
    {
        fprintf(stderr, "L%d: can't swap, stack too short\n", line_number);
        exit(EXIT_FAILURE);
    }

    second = (*stack)->next;

    first->next = second->next;
    second->prev = NULL;
    second->next = first;
    first->prev = second;

    
    *stack = second;

    if (first->next)
        first->next->prev = first;
}
